// Generated by gencpp from file jaskier_msgs/handActive.msg
// DO NOT EDIT!


#ifndef JASKIER_MSGS_MESSAGE_HANDACTIVE_H
#define JASKIER_MSGS_MESSAGE_HANDACTIVE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jaskier_msgs
{
template <class ContainerAllocator>
struct handActive_
{
  typedef handActive_<ContainerAllocator> Type;

  handActive_()
    : hand_active(false)  {
    }
  handActive_(const ContainerAllocator& _alloc)
    : hand_active(false)  {
  (void)_alloc;
    }



   typedef uint8_t _hand_active_type;
  _hand_active_type hand_active;





  typedef boost::shared_ptr< ::jaskier_msgs::handActive_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaskier_msgs::handActive_<ContainerAllocator> const> ConstPtr;

}; // struct handActive_

typedef ::jaskier_msgs::handActive_<std::allocator<void> > handActive;

typedef boost::shared_ptr< ::jaskier_msgs::handActive > handActivePtr;
typedef boost::shared_ptr< ::jaskier_msgs::handActive const> handActiveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jaskier_msgs::handActive_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jaskier_msgs::handActive_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jaskier_msgs::handActive_<ContainerAllocator1> & lhs, const ::jaskier_msgs::handActive_<ContainerAllocator2> & rhs)
{
  return lhs.hand_active == rhs.hand_active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jaskier_msgs::handActive_<ContainerAllocator1> & lhs, const ::jaskier_msgs::handActive_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jaskier_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::jaskier_msgs::handActive_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaskier_msgs::handActive_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaskier_msgs::handActive_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaskier_msgs::handActive_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaskier_msgs::handActive_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaskier_msgs::handActive_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jaskier_msgs::handActive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1387d0fd59a787e8568976617c630546";
  }

  static const char* value(const ::jaskier_msgs::handActive_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1387d0fd59a787e8ULL;
  static const uint64_t static_value2 = 0x568976617c630546ULL;
};

template<class ContainerAllocator>
struct DataType< ::jaskier_msgs::handActive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jaskier_msgs/handActive";
  }

  static const char* value(const ::jaskier_msgs::handActive_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jaskier_msgs::handActive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Indicates if the hand is in an active state\n"
"\n"
"# true if hand is active (i.e. not by the user's side)\n"
"bool hand_active\n"
;
  }

  static const char* value(const ::jaskier_msgs::handActive_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jaskier_msgs::handActive_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hand_active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct handActive_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jaskier_msgs::handActive_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jaskier_msgs::handActive_<ContainerAllocator>& v)
  {
    s << indent << "hand_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand_active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JASKIER_MSGS_MESSAGE_HANDACTIVE_H
